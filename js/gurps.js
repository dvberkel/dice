GURPS = {
    "version" : "0.0.0"
};
(function($, _, Backbone, GURPS){
    var Die = Backbone.Model.extend({
        defaults : { sides : 6, random : Math.random },
        
        sides : function(){
            return this.get("sides");
        },
        
        cast : function(){
	    var result = Math.floor((this.get("random")() * this.sides()) + 1)
	    this.trigger("cast", result);
	    return result;
        }
    });

    var Dice = Backbone.Collection.extend({
	model : Die,

	cast : function(){
	    var result = 0;
	    this.each(function(die){
		result += die.cast();
	    });
	    return result;
	}
    });

    var DiceBuilder = function(){
	var _amount = 1;
	var _sides = 6;

	this.amount = function(amount){
	    _amount = amount;
	    return this;
	};

	this.sides = function(sides) {
	    _sides = sides;
	    return this;
	};

	this.build = function(){
	    var dice = new Dice();
	    for (var index = 0; index < _amount; index++) {
		dice.add({ die : new Die({ sides : _sides }) });
	    }
	    return dice;
	};
    }


    var DiceValue = Backbone.Model.extend({
        defaults : { multiplier : 1, basis : 0 },

	initialize : function(){
	    if (!this.has("dice")) {
		var dice = new DiceBuilder().amount(1).sides(6).build();
		this.set("dice", dice);
	    }
	},
	
	multiply : function(multiplier){
	    this.set("multiplier", multiplier);

	    return this;
	},
	
	basis : function(basis){
	    this.set("basis", basis);

	    return this;
	},
	
	cast : function(){
	    var face = this.get("dice").cast();
	    var result = this.get("multiplier") * face + this.get("basis");
	    this.trigger("cast", result);
	    return result;
	    
	}
    });

    GURPS.Die = Die;
    GURPS.Dice = Dice;
    GURPS.DiceBuilder = DiceBuilder;
    GURPS.DiceValue = DiceValue;
})(jQuery, _, Backbone, GURPS);

GURPS.Parser = (function(){
  /*
   * Generated by PEG.js 0.7.0.
   *
   * http://pegjs.majda.cz/
   */
  
  function quote(s) {
    /*
     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
     * string literal except for the closing quote character, backslash,
     * carriage return, line separator, paragraph separator, and line feed.
     * Any character may appear in the form of an escape sequence.
     *
     * For portability, we also escape escape all control and non-ASCII
     * characters. Note that "\0" and "\v" escape sequences are not used
     * because JSHint does not like the first and IE the second.
     */
     return '"' + s
      .replace(/\\/g, '\\\\')  // backslash
      .replace(/"/g, '\\"')    // closing quote character
      .replace(/\x08/g, '\\b') // backspace
      .replace(/\t/g, '\\t')   // horizontal tab
      .replace(/\n/g, '\\n')   // line feed
      .replace(/\f/g, '\\f')   // form feed
      .replace(/\r/g, '\\r')   // carriage return
      .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
      + '"';
  }
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "expression": parse_expression,
        "factor": parse_factor,
        "empty_factor": parse_empty_factor,
        "number": parse_number,
        "dice": parse_dice,
        "offset": parse_offset,
        "empty_offset": parse_empty_offset,
        "delta": parse_delta
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "expression";
      }
      
      var pos = 0;
      var reportFailures = 0;
      var rightmostFailuresPos = 0;
      var rightmostFailuresExpected = [];
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        var escapeChar;
        var length;
        
        if (charCode <= 0xFF) {
          escapeChar = 'x';
          length = 2;
        } else {
          escapeChar = 'u';
          length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function matchFailed(failure) {
        if (pos < rightmostFailuresPos) {
          return;
        }
        
        if (pos > rightmostFailuresPos) {
          rightmostFailuresPos = pos;
          rightmostFailuresExpected = [];
        }
        
        rightmostFailuresExpected.push(failure);
      }
      
      function parse_expression() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_factor();
        if (result0 !== null) {
          result1 = parse_dice();
          if (result1 !== null) {
            result2 = parse_offset();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, multiplier, dice, basis) { return dice.multiply(multiplier).basis(basis); })(pos0, result0[0], result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_factor() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_number();
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 42) {
            result1 = "*";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"*\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, factor) { return factor; })(pos0, result0[0]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          result0 = parse_empty_factor();
        }
        return result0;
      }
      
      function parse_empty_factor() {
        var result0;
        var pos0;
        
        pos0 = pos;
        result0 = "";
        if (result0 !== null) {
          result0 = (function(offset) { return 1; })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_number() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        if (/^[0-9]/.test(input.charAt(pos))) {
          result1 = input.charAt(pos);
          pos++;
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[0-9]");
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (/^[0-9]/.test(input.charAt(pos))) {
              result1 = input.charAt(pos);
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[0-9]");
              }
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, digits) { return parseInt(digits.join(''), 10); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_dice() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_number();
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 100) {
            result1 = "d";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"d\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_number();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, amount, sides) { 
        	var dice = (new GURPS.DiceBuilder())
        	    .amount(amount)
        	    .sides(sides)
        	    .build();
        	return new GURPS.DiceValue({ dice : dice }); 
            })(pos0, result0[0], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_offset() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_delta();
        if (result0 !== null) {
          result1 = parse_number();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, multiplier, offset) { return multiplier * offset; })(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          result0 = parse_empty_offset();
        }
        return result0;
      }
      
      function parse_empty_offset() {
        var result0;
        var pos0;
        
        pos0 = pos;
        result0 = "";
        if (result0 !== null) {
          result0 = (function(offset) { return 0; })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_delta() {
        var result0;
        var pos0;
        
        pos0 = pos;
        if (input.charCodeAt(pos) === 43) {
          result0 = "+";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"+\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset) { return +1; })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          if (input.charCodeAt(pos) === 45) {
            result0 = "-";
            pos++;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"-\"");
            }
          }
          if (result0 !== null) {
            result0 = (function(offset) { return -1; })(pos0);
          }
          if (result0 === null) {
            pos = pos0;
          }
        }
        return result0;
      }
      
      
      function cleanupExpected(expected) {
        expected.sort();
        
        var lastExpected = null;
        var cleanExpected = [];
        for (var i = 0; i < expected.length; i++) {
          if (expected[i] !== lastExpected) {
            cleanExpected.push(expected[i]);
            lastExpected = expected[i];
          }
        }
        return cleanExpected;
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i < Math.max(pos, rightmostFailuresPos); i++) {
          var ch = input.charAt(i);
          if (ch === "\n") {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var offset = Math.max(pos, rightmostFailuresPos);
        var found = offset < input.length ? input.charAt(offset) : null;
        var errorPosition = computeErrorPosition();
        
        throw new this.SyntaxError(
          cleanupExpected(rightmostFailuresExpected),
          found,
          offset,
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(expected, found, offset, line, column) {
    function buildMessage(expected, found) {
      var expectedHumanized, foundHumanized;
      
      switch (expected.length) {
        case 0:
          expectedHumanized = "end of input";
          break;
        case 1:
          expectedHumanized = expected[0];
          break;
        default:
          expectedHumanized = expected.slice(0, expected.length - 1).join(", ")
            + " or "
            + expected[expected.length - 1];
      }
      
      foundHumanized = found ? quote(found) : "end of input";
      
      return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
    }
    
    this.name = "SyntaxError";
    this.expected = expected;
    this.found = found;
    this.message = buildMessage(expected, found);
    this.offset = offset;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();

(function(_, Backbone, GURPS){
    var Description = Backbone.Model.extend({
	defaults : { description : "3d6" },

	initialize : function(){
	    this.on("change:description", this.process, this);
	    this.process();
	},

	process : function(){
	    try {
		var dice = GURPS.Parser.parse(this.get("description"));
		this.set("dice", dice);
	    } catch(error) {
		this.unset("dice");
	    }
	},

	isValid : function(){
	    return this.has("dice");
	},

	cast : function(){
	    if (this.has('dice')) {
		this.trigger("cast", this.get("dice").cast());
	    }
	}
    });

    GURPS.Description = Description;
})(_, Backbone, GURPS);
(function($, _, Backbone, GURPS){
    var MainView = Backbone.View.extend({
	initialize : function(){
	    this.render();
	},
	
	render : function(){
	    var $body = $('body');
 	    new DescriptionView({ model : this.model, el : $body });
 	    new ResultView({ model : this.model, el : $body });
	}
    });

    var DescriptionView = Backbone.View.extend({
	options : { offset : 1 },

	initialize : function(){
	    this.model.on("change:description", this.render, this);
	    this.render();
	},
	
	render : function(){
	    var $input = this.input();
	    var description = this.model.get("description");
	    $input.attr("value", description);
	    $input.attr("size", description.length + this.options.offset);
	    $input.removeClass();
	    $input.addClass(this.model.isValid() ? "valid" : "invalid");
	},

	input : function(){
	    var self = this;
	    if (! self._input) {
		var $input = $("<input id='description' type='text'/>");
		$input.keyup(function(){
		    self.model.set("description", $input.val());
		});
		$input.keypress(function(e){
		    if (e.which == 13) self.model.cast();
		});
		$input.appendTo(self.$el);
		self._input = $input;
	    }
	    return self._input;
	}
    });

    var ResultView = Backbone.View.extend({
	options : { last : "_" },

	initialize : function(){
	    this.model.on("change:description", this.clear, this);
	    this.model.on("change:description", this.render, this);
	    this.model.on("cast", this.cast, this);
	    this.render();
	},

	clear : function(){
	    this.options.last = "_";
	},
	
	render : function(){
	    var $span = this.span();
	    if (this.model.isValid()) {
		$span.show();
		$span.text(this.options.last);
	    } else {
		$span.hide();
	    }
	},

	span : function(){
	    if (! this._span) {
		var $span = $("<span class='result'>_</span>");
		$span.click(function(){
		    console.log("clicked");
		});
		$span.appendTo(this.$el);
		this._span = $span;
	    }
	    return this._span;
	},

	cast : function(value) {
	    this.options.last = value;
	    this.render();
	}
    });

    GURPS.MainView = MainView;
})($, _, Backbone, GURPS);